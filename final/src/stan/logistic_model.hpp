
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace logistic_model_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 13, column 2 to column 9)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 14, column 2 to column 9)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 24, column 2 to column 25)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 25, column 2 to column 22)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 27, column 4 to column 76)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 28, column 4 to column 90)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 26, column 21 to line 29, column 3)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 26, column 2 to line 29, column 3)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 17, column 2 to column 19)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 18, column 2 to column 19)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 20, column 4 to column 76)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 19, column 17 to line 21, column 3)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 19, column 2 to line 21, column 3)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 2, column 2 to column 17)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 3, column 2 to column 23)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 4, column 2 to column 22)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 5, column 9 to column 10)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 5, column 2 to column 14)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 6, column 8 to column 9)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 6, column 2 to column 17)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 7, column 8 to column 9)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 7, column 2 to column 26)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 8, column 8 to column 15)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 8, column 2 to column 47)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 9, column 8 to column 14)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 9, column 2 to column 45)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 10, column 2 to column 34)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 24, column 8 to column 14)",
                                                      " (in '/Users/dominikwozniak/study/data_analytics/final/src/stan/logistic_model.stan', line 25, column 9 to column 15)"};



class logistic_model_model final : public model_base_crtp<logistic_model_model> {

 private:
  int N;
  int N_train;
  int N_test;
  Eigen::Matrix<double, -1, 1> x;
  std::vector<int> y;
  std::vector<int> batch_size;
  std::vector<int> ix_train;
  std::vector<int> ix_test;
  int likelihood;
 
 public:
  ~logistic_model_model() { }
  
  inline std::string model_name() const final { return "logistic_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = --warn-pedantic"};
  }
  
  
  logistic_model_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "logistic_model_model_namespace::logistic_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 14;
      current_statement__ = 14;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 15;
      context__.validate_dims("data initialization","N_train","int",
          context__.to_vec());
      N_train = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      N_train = context__.vals_i("N_train")[(1 - 1)];
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "N_train", N_train, 1);
      current_statement__ = 16;
      context__.validate_dims("data initialization","N_test","int",
          context__.to_vec());
      N_test = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "N_test", N_test, 1);
      current_statement__ = 17;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 18;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 18;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 19;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N));
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 20;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 21;
      validate_non_negative_index("batch_size", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","batch_size","int",
          context__.to_vec(N));
      batch_size = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 22;
      assign(batch_size, nil_index_list(), context__.vals_i("batch_size"),
        "assigning variable batch_size");
      current_statement__ = 23;
      validate_non_negative_index("ix_train", "N_train", N_train);
      current_statement__ = 24;
      context__.validate_dims("data initialization","ix_train","int",
          context__.to_vec(N_train));
      ix_train = std::vector<int>(N_train, std::numeric_limits<int>::min());
      
      current_statement__ = 24;
      assign(ix_train, nil_index_list(), context__.vals_i("ix_train"),
        "assigning variable ix_train");
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= N_train; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "ix_train[sym1__]",
                               ix_train[(sym1__ - 1)], 1);}
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= N_train; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_less_or_equal(function__, "ix_train[sym1__]",
                            ix_train[(sym1__ - 1)], N);}
      current_statement__ = 25;
      validate_non_negative_index("ix_test", "N_test", N_test);
      current_statement__ = 26;
      context__.validate_dims("data initialization","ix_test","int",
          context__.to_vec(N_test));
      ix_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      
      current_statement__ = 26;
      assign(ix_test, nil_index_list(), context__.vals_i("ix_test"),
        "assigning variable ix_test");
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "ix_test[sym1__]",
                               ix_test[(sym1__ - 1)], 1);}
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_less_or_equal(function__, "ix_test[sym1__]",
                            ix_test[(sym1__ - 1)], N);}
      current_statement__ = 27;
      context__.validate_dims("data initialization","likelihood","int",
          context__.to_vec());
      likelihood = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 27;
      current_statement__ = 27;
      check_greater_or_equal(function__, "likelihood", likelihood, 0);
      current_statement__ = 27;
      current_statement__ = 27;
      check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 28;
      validate_non_negative_index("yrep", "N_test", N_test);
      current_statement__ = 29;
      validate_non_negative_index("llik", "N_test", N_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "logistic_model_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      current_statement__ = 1;
      a = in__.scalar();
      local_scalar_t__ b;
      b = DUMMY_VAR__;
      
      current_statement__ = 2;
      b = in__.scalar();
      {
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(a, 0, 1));
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(b, 0, 1));
        current_statement__ = 13;
        if (likelihood) {
          current_statement__ = 11;
          lp_accum__.add(
            binomial_logit_lpmf<propto__>(
              rvalue(y, cons_list(index_multi(ix_train), nil_index_list()),
                "y"),
              rvalue(batch_size,
                cons_list(index_multi(ix_train), nil_index_list()),
                "batch_size"),
              add(a,
                multiply(b,
                  rvalue(x,
                    cons_list(index_multi(ix_train), nil_index_list()), "x")))));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "logistic_model_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = in__.scalar();
      double b;
      b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      b = in__.scalar();
      vars__.emplace_back(a);
      vars__.emplace_back(b);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> yrep;
      yrep = std::vector<int>(N_test, std::numeric_limits<int>::min());
      
      Eigen::Matrix<double, -1, 1> llik;
      llik = Eigen::Matrix<double, -1, 1>(N_test);
      stan::math::fill(llik, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int n = 1; n <= N_test; ++n) {
        current_statement__ = 5;
        assign(yrep, cons_list(index_uni(n), nil_index_list()),
          binomial_rng(batch_size[(n - 1)],
            inv_logit((a + (b * x[(ix_test[(n - 1)] - 1)]))), base_rng__),
          "assigning variable yrep");
        current_statement__ = 6;
        assign(llik, cons_list(index_uni(n), nil_index_list()),
          binomial_logit_lpmf<false>(y[(n - 1)], batch_size[(n - 1)],
            inv_logit((a + (b * x[(ix_test[(n - 1)] - 1)])))),
          "assigning variable llik");}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(yrep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(llik[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = context__.vals_r("a")[(1 - 1)];
      double b;
      b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      b = context__.vals_r("b")[(1 - 1)];
      vars__.emplace_back(a);
      vars__.emplace_back(b);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("a");
    names__.emplace_back("b");
    names__.emplace_back("yrep");
    names__.emplace_back("llik");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_test)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_test)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"array\",\"length\":" << N_test << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"array\",\"length\":" << N_test << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = logistic_model_model_namespace::logistic_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return logistic_model_model_namespace::profiles__;
}

#endif


